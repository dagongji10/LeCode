# -*- coding: utf-8 -*-

'''
@ Time  : 2021/3/25/0025 19:22
@ Author: dagongji09
@ File  : 65.py
'''

'''
题目：
写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。

分析：
1、不用加减乘除的话，可以考虑自己写一个加法器，罗列每一对数字做加法的情况，这样总共有 10*10=100 种情况；
2、100 种情况写起来太多，如何减少？100 来源于 10 的平方，探其本质是因为有十个数字，因为我们用的是十进制，所以可以考虑用二进制（关键）；
3、先将两个数字转为二进制，然后就有 2*2=4 种情况，但这仅仅是不考虑进位，我们还要考虑进位:
    1) 二进制的非进位和其实就是异或操作 m=a⊕b
    2) 二进制的进位和其实就是与操作后左移一位 n=a&b<<1
    3) 进位和加上非进位和就是最终的结果 s=m+n
4、如果有负数怎么办？计算机中二进制的编码有三种方式：原码，反码，补码，其中反码就是为了解决负数的加法，补码则在反码的基础上解决了0的编码问题，也就是说：可以直接用补码做运算
    1) 原码计算：
    2) 反码计算：
    3) 补码计算：
5、python中数字都是以补码形式存储的，所以不用刻意去转补码再做运算；但是，python 中没有long、double等类型，只有一个 int，它没有变量位数的概念，而题目要求是32位整数，所以要将32位以上的编码去掉
'''


class Solution:
    def add(self, a: int, b: int) -> int:
        # 将超过 32 位的部分变为0，无限长的数字就变成了32位
        x = 0xffffffff
        a, b = a & x, b & x

        # 循环的结束点是进位和等于0，没有进位，那就直接返回非进位和 a+b
        while b != 0:
            # 与运算左移会使数字变大，它可能超过32位，所以最后要将超过 32 位的部分变为0
            a, b = a ^ b, (a & b) << 1 & x

        return a if a <= 0x7fffffff else ~(a ^ x)
