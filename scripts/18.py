"""
Created on Mon Aug 26 21:44:09 2019
@author: 短腿伊斯科22
"""

# -*- coding: utf-8 -*-

'''
解答过2SUM和3SUM问题之后，我们大概也清楚这类问题的入手思路：（1）排序之后双指针；（2）哈希表
对于4SUM问题，能否也使用这两种方法呢？先来看一下
（1）排序之后双指针：双指针用来搜索两个数，那么需要固定的就是另外两个数，固定这两个数需要 O(n2) 时间复杂度，再加上双指针的 O(n)，最终就是O(n3)
（2）哈希表：哈希表是用来搜索一个值的，那么就有三个值要固定，时间复杂度也是 O(n3)
有没有更好的算法呢？哈希表能不能判断多于两个值的情况呢？要判断多于两个值那只能将这两个值的和存入哈希表，然后判断target减去另外两个数的差是不是等于哈希表中的某一个值了
理一下这个思路：
（1）先通过遍历固定前两个数a、b，也就是需要两个for循环，第二个数始终在第一个数的后面
（2）diff=target-(a+b)，判断diff是否在哈希表中，如果在的话取出diff对应的两个数，看一下如果没有和a、b重复那就符合要求
（3）sum=a+b，sum要存入哈希表以便之后的另一个a、b来判断，同时还要存入它们的索引，因为（2）中需要找到组成sum的两个因数
需要注意的几点：
（1）因为哈希表要存入索引对，所以可以用字典来实现，字典的键就是sum，值就是索引对数组；注意一个sum可能对应多个索引对，所以是数组
（2）如果说找到的四元数组满足要求，那就存下来，但是有可能哈希表里面的多个索引对都符合要求，而且它们的值还相等，那就需要去重；去重的方法是先将四元数组变为元组tuple，然后存入一个集合，最后将集合变成列表返回
时间复杂度：
首先前两层的for循环应该是占用 O(n2) 的时间复杂度，哈希表查找复杂度是 O(1)，遍历该哈希值的索引对复杂度不会超过 O(n)，应该是 O(logn)???
所以最终的时间复杂度就是 O(n2logn)

拓展：
这种方式可以延伸到 k-SUM 问题，如果 k 是偶数，都可以将 k 个数分成两部分，然后用哈希表来判断，时间复杂度为 O(n^(k/2)logn)
如果 k 是奇数，先计算 (k-1)/2 个数的和并将其存入到哈希表，都计算完之后再在原始数组S和哈希表中分别找到a、x，看 target-a-x 是否在哈希表中，时间复杂度为 O(n^(k+1)/2*logn)

'''

def fourSum(nums, target):
    if len(nums)<4:
        return []
    
    idxs = {}
    ans = []
    for i in range(len(nums)-1):
        a = nums[i]
        for j in range(i+1, len(nums)):
            b = nums[j]
            _sum = a+b
            _diff = target-_sum
            
            if _diff in idxs:
                for t in idxs[_diff]:
                    m,n = t
                    if m!=i and m!=j and n!=i and n!=j:
                        tem = sorted([a, b, nums[m], nums[n]])
                        ans.append(tem)
            
            if _sum in idxs:
                idxs[_sum].append([i, j])
            else:
                idxs[_sum] = []
                idxs[_sum].append([i, j])
            
    ans = [list(t) for t in set(tuple(_) for _ in ans)]
    return ans
            
print(fourSum([-491,-487,-445,-436,-435,-429,-398,-385,-378,-370,-367,-353,-344,-325,-284,-279,-269,-262,-189,-182,-164,-152,-123,-118,-110,-64,-55,-48,-45,9,14,17,47,54,64,64,70,94,114,144,161,171,188,194,205,241,271,284,312,341,363,376,407,410,413,441,442,455,476,492], -1529))